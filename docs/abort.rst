==================
abort - MapToolDoc
==================

.. contents::
   :depth: 3
..

.. container:: noprint
   :name: mw-page-base

.. container:: noprint
   :name: mw-head-base

.. container:: mw-body
   :name: content

   .. container:: mw-indicators

   .. rubric:: abort
      :name: firstHeading
      :class: firstHeading

   .. container:: mw-body-content
      :name: bodyContent

      .. container::
         :name: siteSub

         From MapToolDoc

      .. container::
         :name: contentSub

      .. container:: mw-jump
         :name: jump-to-nav

         Jump to: `navigation <#mw-head>`__, `search <#p-search>`__

      .. container:: mw-content-ltr
         :name: mw-content-text

         .. container:: toc
            :name: toc

            .. container::
               :name: toctitle

               .. rubric:: Contents
                  :name: contents

            -  `1 abort() Function <#abort.28.29_Function>`__

               -  `1.1 Usage <#Usage>`__
               -  `1.2 Examples <#Examples>`__
               -  `1.3 Usage Notes <#Usage_Notes>`__

                  -  `1.3.1 Calling Macro <#Calling_Macro>`__
                  -  `1.3.2 Called Macro <#Called_Macro>`__
                  -  `1.3.3 Results <#Results>`__

               -  `1.4 See Also <#See_Also>`__
               -  `1.5 Version Changes <#Version_Changes>`__

         .. rubric:: abort() Function
            :name: abort-function

         .. container:: template_version

            • **Introduced in version 1.3b42**

         .. container:: template_description

            Is used to conditionally abort the execution of a macro. If
            the argument to ``abort()`` is 0 then the execution of the
            macro stops and all macro output is discarded. If the
            argument to ``abort()`` is non zero then the macro
            continues.
            Note that only the output of the macro is discarded when the
            macro is aborted any changes made to macros will not be
            undone.

            Common uses for this function are

            -  Ending a macro if the cancel button is clicked on an
               input dialog created using the
               `input() <Macros:Functions:input>`__
               function.
            -  Discarding all output generated by the macro, in effect
               making a "silent" macro.
            -  Silently bailing out of a macro if a certain condition is
               not met.

            If you prefer to display an error message when exiting the
            macro see the ```assert()`` <assert>`__
            function.

         .. rubric:: Usage
            :name: usage

         .. container:: mw-geshi mw-code mw-content-ltr

            .. container:: mtmacro source-mtmacro

               #. .. code-block:: none

                     abort(abrt)

         **Parameters**

         -  ``abrt`` - ``0`` if the abort function should abort the
            macro, nonzero if it should not.

         .. rubric:: Examples
            :name: examples

         .. container:: template_examples

            The following example will create a dialog box for the user
            to enter a value for the variable named blah, if the user
            clicks on cancel then res will be 0 so the abort() function
            will cause the macro to terminate, otherwise res will not be
            0 so the macro will continue.

            .. container:: mw-geshi mw-code mw-content-ltr

               .. container:: mtmacro source-mtmacro

                  #. .. code-block:: none

                        [h: res = input("blah")] [h: abort(res)]

            The following example discards any output in the macro.

            .. container:: mw-geshi mw-code mw-content-ltr

               .. container:: mtmacro source-mtmacro

                  #. .. code-block:: none

                        Hah! you will never see this! [abort(0)]

            The following line can be used to protect macros that only
            the GM should run

            .. container:: mw-geshi mw-code mw-content-ltr

               .. container:: mtmacro source-mtmacro

                  #. .. code-block:: none

                        [h: abort(isGM())]

            The following line can be used to silently end a macro that
            can only be run from a `Trusted
            Macro <Trusted_Macro>`__

            .. container:: mw-geshi mw-code mw-content-ltr

               .. container:: mtmacro source-mtmacro

                  #. .. code-block:: none

                        [h: abort(isTrusted())]

            .. rubric:: Usage Notes
               :name: usage-notes

            When aborting a macro called from another macro (for
            example, a `library
            token <Token:library_token>`__), all macros
            are aborted, not just the one executing.

            Since 1.5.0 you can change that behaviour by using
            `macro.catchAbort <macro.catchAbort>`__.

            .. rubric:: Calling Macro
               :name: calling-macro

            .. container:: mw-geshi mw-code mw-content-ltr

               .. container:: mtmacro source-mtmacro

                  #. .. code-block:: none

                        <!-- Call the getAmmo library macro -->

                  #. .. code-block:: none

                        [MACRO("getAmmo@Lib:test"): "arrows"]

                  #. .. code-block:: none

                        You have [r:macro.return] arrows.

            .. rubric:: Called Macro
               :name: called-macro

            .. container:: mw-geshi mw-code mw-content-ltr

               .. container:: mtmacro source-mtmacro

                  #. .. code-block:: none

                        <!-- getAmmo macro in Lib:test token -->

                  #. .. code-block:: none

                        [h: macro.return = 0]

                  #. .. code-block:: none

                        [h: abort(json.contains(ammunition, macro.args))]

                  #. .. code-block:: none

                        [h: macro.return = json.get(ammunition, macro.args)]

            .. rubric:: Results
               :name: results

            *assuming ammunition = { "arrows" : 30 }*

            ::

               TokenName: You have 30 arrows.

            *assuming ammunition = { "bolts" : 20 }*

            (nothing)

         .. rubric:: See Also
            :name: see-also

         .. container:: template_also

            `assert() <assert>`__
            `macro.catchAbort <macro.catchAbort>`__

         .. rubric:: Version Changes
            :name: version-changes

         .. container:: template_changes

            -  **1.3b49** - No message is displayed if called from a
               macroLink.
            -  **1.5.0** - catch an abort with macro.catchAbort

      .. container:: printfooter

         Retrieved from
         "http://lmwcs.com/maptool/index.php?title=abort&oldid=7243"

